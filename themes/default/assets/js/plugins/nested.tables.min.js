var NestedTables = function (container, data, totals, headers, filters, sort0, hidden, options, horizontal = false) {
    this.body = $(container);
    this.data = data;
    this.totals = totals;
    this.columns = headers.slice(0);
    this.columns1 = JSON.parse(JSON.stringify(headers));
    this.columns1[0].className = 'detail-control';
    this.filters = filters;
    this.groupColumns = [];
    this.order = [];
    this.sort0 = sort0 || [];
    this.tables = [];
    this.levels = [];
    this.dataIds = [];
    this.footers = [];
    this.columnIds = [];
    this.relations = [];
    this.vtotal = null;
    this.hidden=hidden;
    this.maxLevel = 0;
    this.options = options;
    this.horizontal = options.horizontal;
    this.groupcount = options.groupcount || 0;
    console.log(this.groupcount);
    this.corder = options.corder || [];
    this.expanded = [];
    this.cchange = true;
    $.fn.dataTable.ext.errMode = 'none';
    this.init();
};
/** class methods **/
NestedTables.prototype = {
    init: function () {
        var that = this;
        this.columns[0].className = 'detail-control';
        for(var i in this.columns){
            if(this.columns[i].format == 'usd')
                this.columns[i].render = function(val, type, full) {
                    if(val != null) return '$' + parseFloat(val).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                }
            else if(this.columns[i].format == 'date'){
                this.columns[i].render = function(val, type, full) {
                    if(val != null) return moment(val).format('MM/DD/YYYY');
                }
            }
        }
        for(var i in this.columns1){
            if(this.columns1[i].format == 'usd')
                this.columns1[i].render = function(val, type, full) {
                    if(val != null) return '$' + parseFloat(val).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                }
            else if(this.columns1[i].format == 'date'){
                this.columns1[i].render = function(val, type, full) {
                    if(val != null) return moment(val).format('MM/DD/YYYY');
                }
            }
        }
        this.initHeader();
        this.initEvents();
        this.initTable();
        this.body.find('#table0_wrapper').on('scroll',function () {
            that.body.find('#header-wrapper').scrollLeft($(this).scrollLeft());
        });
    },

    initHeader: function(){
        this.destroyTables();
        var that = this;
        var div = $("<piv id='header-wrapper'></piv>")
        var header = $("<table></table>");
        div.append(header);
        this.body.prepend(div);
        this.header = header.DataTable({"columns": this.columns, "bFilter": false,
            "bInfo": false,
            "colReorder": !this.horizontal,
            "paging": false});
        header.find('tbody').remove();
        if(!this.horizontal){
            that.header.colReorder.order(that.corder);
            header.on( 'column-reorder.dt', function () {
                that.corder = that.header.colReorder.order();
                for(var i in that.tables){
                    if(that.tables[i].toOrder) {
                        that.tables[i].colReorder.order(that.corder, true);
                    }
                }
            });
        }
    },

    initEvents: function () {
        var that = this;

        this.body.off('click').on('click', 'td', function (e) {
            e.stopPropagation();
            var td = $(this);
            if(JS.clicks == 0 || e.originalEvent !== undefined) JS.clicks++;
            console.log(JS.clicks)
            if (JS.clicks === 1) {
                JS.clickTimer = setTimeout(function () {
                    JS.clicks = 0;
                    if(td.hasClass('detail-control')){
                        if(td.find('span').length == 0) return;
                        var tr = td.closest('tr');
                        var table = td.closest('table');
                        var child = that.relations[table.attr('table-id')+"."+tr.attr('row-id')];
                        var row = that.tables[table.attr('table-id')].row( tr );
                        if ( row.child.isShown() ) {
                            // This row is already open - close it
                            row.child.hide();
                            tr.removeClass('shown');
                        }
                        else {
                            var ttable = $("<table width='100%' table-id='"+child+"' id='table"+child+"'></table>");
                            var settings = {
                                "bFilter": false,
                                "bSort": true,
                                "bInfo": false,
                                "colReorder": true,
                                "paging": false,
                                "drawCallback": function (settings) {
                                    $(this).attr("class", "").addClass("table-c e");
                                },
                                "createdRow": function( row, data, dataIndex ) {
                                    if(data.item_id != null) $(row).attr('row-id', data.item_id); else $(row).attr('row-id', dataIndex);
                                },
                            };;
                            if(that.columnIds[child] != null) {
                                settings.aoColumns = that.columnIds[child];
                            }else {
                                settings.aoColumns = that.columns;
                            }
                            settings.aaData = that.dataIds[child];
                            settings.order = that.order[child];
                            row.child( ttable).show();
                            var dtable = that.body.find('#table'+child).DataTable(settings);
                            that.hideNewColumns(dtable);
                            if(that.columnIds[child] == null) {
                                dtable.toOrder = true;
                                if(that.corder)dtable.colReorder.order(that.corder);
                            }
                            that.tables[child] = dtable;
                            if(e.originalEvent === undefined) that.initExpand(child);
                            tr.addClass('shown');
                            if(that.footers[child])
                                ttable.find('tr:last td:not(:first):not(:empty)').addClass('footer-total');
                            that.recalculateWidth(ttable, child);
                        }
                    }else{

                    }
                }, e.originalEvent !== undefined ? JS.dcDelay : 0);
            } else {
                clearTimeout(JS.clickTimer);
                JS.clicks = 0;
                if(td.hasClass('detail-control')){
                    var table = that.tables[td.closest('table').attr('table-id')];
                    //console.log(table.settings().init());
                    var tr = td.closest('tr');
                    that.tddata = table.row( tr ).data();
                    $(that).trigger('tdclick');
                }else{
                    var table = that.tables[td.closest('table').attr('table-id')];
                    //console.log(table.settings().init());
                    var tr = td.closest('tr');
                    var data = table.row( tr ).data();
                    if(that.horizontal){
                        var header = that.body.find('#header-wrapper th');
                        var columns = table.settings().init().aoColumns;
                        var colData = columns[table.cell(this).index().column];
                        var filters = data.fcolumn+','+data.dcolumn+'|'+colData.condition;
                        var values = data.fname+'$$'+colData.date;
                        that.openReportModal(filters, values, that.options.typeName+' for '+colData.date.replace('|',' - '));
                    } else {
                        var type=null;
                        if(data['main-type'] && data['main-type']!='') type = data['main-type'];
                        JS.openDraggableModal(type || that.body.parent().find('#record_types option:selected').attr('type') || that.body.parent().find('#record_types').val(), 'edit', data['main-id'], null, null);
                    }
                }
            }
        } );
    },

    openReportModal(f, v, t){
        JS.openDraggableModal('report', 'add', '0', null, { data: v, filters: f, type: this.options.type, title: t});
    },

    initTable: function(){
        this.parseData();
        var that = this;
        var table = $("<table width='100%' table-id='0' id='table0'></table>").appendTo(this.body);
        var settings = {
            "bFilter": false,
            "bSort": true,
            "bInfo": false,
            "paging": false,
            "colReorder": true,
            "drawCallback": function (settings) {
                $(this).attr("class", "").addClass("table-c e");
            },
            "createdRow": function( row, data, dataIndex ) {
                if(data.item_id != null) $(row).attr('row-id', data.item_id); else $(row).attr('row-id', dataIndex);
            },
        };
        settings.aoColumns = this.columns;
        if(this.dataIds.length ==1)
            this.hidden.push('empty');
        settings.data = this.dataIds[0];
        settings.order = this.sort0;
        this.mainTable = this.body.find('#table0').DataTable(settings);
        if(this.relations.length == 0) this.mainTable.toOrder = true;
        this.tables[0] = this.mainTable;

        if(that.groupcount > 1 && !that.horizontal || that.groupcount > 3 || that.maxLevel >= 1)that.initExpand(0);
        if(this.vtotal != null){
            var table = $("<table width='100%' table-id='99999' id='table99999' style='border-top:2px solin black;'></table>").appendTo(this.body.find("#table0_wrapper"));
            var settings = {
                "bInfo": false,
                "paging": false,
                "bFilter": false,
                "colReorder": true,
                "drawCallback": function (settings) {
                    $(this).attr("class", "").addClass("table-c e");
                },
                "columns" : this.columns,
                "data" : [this.vtotal]
            };
            var vtable = this.body.find('#table99999').DataTable(settings);
            this.tables[99999] = vtable;
            this.levels[99999] = 0;
            this.hideNewColumns(vtable);
            this.recalculateWidth(this.body.find('#table99999'), 0);
            //var ch = {desc: ' ', asc: '&#127;'};
            //if(this.sort0.length > 1) this.vtotal.c999 = ch[this.sort0[1]] + this.vtotal.c999;

            //this.mainTable.row.add(this.vtotal).draw();
        }
        this.hideNewColumns(this.mainTable);
        this.mainTable.colReorder.order(this.corder);
        this.recalculateWidth(this.body.find('#table0'));
        this.recalculateWidth();
    },

    initExpand: function(tableid){
        var that = this;
        if(this.expanded[tableid] || tableid == 0){
            this.body.find('#table'+tableid+' tr').each(function(){
                if(that.expanded[that.relations[tableid+'.'+$(this).attr('row-id')]]) $(this).find('td:first').trigger('click')
            });
        }
    },

    parseData: function(){
        this.tid = 0;
        if(_.size(this.data) > 0){
            if('total' in this.data){
                this.vtotal = this.data.total;
                delete this.data.total;
            }
            if(!this.horizontal) this.recursiveParse(this.data, -1, 0);
            else this.hg_recursiveParse(this.data, -1, 0);
        }

        //console.log(this.relations);
    },

    recursiveParse: function (data, parent, level, footer = '', order = '', expanded = false){
        var dataSet = [];
        var id = parseInt(this.tid);
        this.tid++;
        //console.log(data);
        if(_.size(data) == 0) return;
        if('name' in data[Object.keys(data)[0]]){
            /*var columns = [{"className": 'detail-control text-nowrap',
                            "data": null,
                            "defaultContent": '',title: '', data: "h1"},
                            {data: "h2", "className": 'w99'}
                ];*/
            var name = '';
            var t = 0;
            for(var i in data){
                name = "<span>&nbsp;</span><span class='d-none'>"+data[i].name+"</span>"+data[i].name;
                data[i].cempty = name;
                dataSet.push(data[i]);
                this.recursiveParse(data[i].data, id+"."+t++, level+1, data[i].footer, data[i].order, data[i].expanded);
            }
            //this.columnIds[id] = columns;
        }else{
            //console.log('here');
            for(var j in data) {
                data[j].cempty = '';
                dataSet.push(data[j]);
            }
        }
        if(_.size(footer)>0){
            footer.cempty = footer.name;
            dataSet.push(footer);
            this.footers[id] = true;
        }

        this.order[id] = order;
        this.levels[id] = level;
        this.dataIds[id] = dataSet;
        //console.log(data);
        this.expanded[id] = expanded;
        if(parent != -1) this.relations[parent] = id;
        if(level>this.maxLevel) this.maxLevel = level;
    },

    hg_recursiveParse: function (data, parent, level, footer = '', order = '', expanded = false){
        var dataSet = [];
        var id = parseInt(this.tid);
        this.tid++;
        //console.log(data);
        if(_.size(data) == 0) return;
        var t = 0;
        for(var i in data) {
            if ('name' in data[i]) {
                //var columns = this.columns1;
                var name = '';
                data[i].c999 = "<span>&nbsp;</span>" + data[i].c999;
                name = "<span>&nbsp;</span><span class='d-none'>" + data[i].name + "</span>" + data[i].name + (data[i].header || '');
                //dataSet.push({c999: name});
                this.hg_recursiveParse(data[i].data, id + "." + t, level + 1, data[i].footer, data[i].order, data[i].expanded);
                //this.columnIds[id] = columns;
            }
            dataSet.push(data[i]);
            t++;
        }
        if(_.size(footer)>0){
            footer.cempty = footer.name;
            dataSet.push(footer);
            this.footers[id] = true;
        }
        this.order[id] = order;
        this.dataIds[id] = dataSet;
        this.levels[id] = level;
        if(parent != -1) this.relations[parent] = id;
        //console.log(level);
        this.expanded[id] = expanded;
        if(level>this.maxLevel) this.maxLevel = level;
    },

    destroyTables: function(){
        if (this.mainTable != null) this.mainTable.destroy();
        this.body.empty();
        this.tables = [];
        this.dataIds = [];
        this.columnIds = [];
    },
    toggleColumn: function(col){
        var that = this;
        for(var i in that.tables){
            var column = that.tables[i].column("c"+col+":name");
            column.visible(!column.visible());
        }
        var column = that.header.column("c"+col+":name");
        column.visible(!column.visible());
        this.cchange = true;
        this.recalculateWidth();
    },
    hideNewColumns: function(table){

        for(var i in this.hidden){
            //console.log(this.hidden[i]);
            var column = table.column("c"+this.hidden[i]+":name");
            column.visible(false);
            var column1 = this.header.column("c"+this.hidden[i]+":name");
            column1.visible(false);
        }
        this.cchange = true;

    },
    recalculateWidth: function(table = null){
        if(this.horizontal){
            this.hg_recalculateWidth(table);
            return;
        }
        var that = this;
        var width0 = 120;
        var width1 = 120;
        var width = this.body.width();
        var padding = 12.5;
        var theader = this.body.find('table:first');
        that.cwidth = parseInt((width-that.maxLevel * padding) / (this.body.find('table:first th').length));
        if(that.cwidth < width1) {
            that.cwidth = width1;
            theader.css('width', '');
        }else{
            width0 = that.cwidth;
            theader.css('width', '100%');
        }
        this.body.find('table:first th').each(function(i){
            if(i>0)
                $(this).css("width", that.cwidth-38);
            else
                $(this).css("width", width0-38+that.maxLevel*padding);
        });
        if(this.cchange) {this.ths = this.body.find('table:first th').map(function(){return $(this).outerWidth();}).get();this.change=false;}
        //console.log(width0-36 +this.maxLevel*12);
        if(table != null){
            var level = that.levels[table.attr('table-id')];
            $(table).children('tbody').children('tr').each(function(j){
                //if($(this).find('td:first').hasClass('detail-control') && !that.horizontal) return;
                $(this).find('td').each(function(i) {
                    if (i > 0) {
                        $(this).css("width", that.ths[i]);
                    }else{
                        $(this).css("width", that.ths[i] - ((level) * padding));
                    }
                });
            });
        }else{
            for(var i in this.tables){
                var table = that.tables[i].tables().nodes().toJQuery();
                var level = that.levels[table.attr('table-id')];
                $(table).children('tbody').children('tr').each(function(){
                    //if($(this).find('td:first').hasClass('detail-control') && !that.horizontal) return;
                    $(this).find('td').each(function(i){
                        if (i > 0) {
                            $(this).css("width", that.ths[i]);
                        }else{
                            $(this).css("width", that.ths[i] - ((level) * padding));
                        }
                    });
                });
            }
        }
    },
    hg_recalculateWidth: function(table = null){
        var that = this;
        var width0 = 150;
        var width1 = 80;
        var padding = 12.5;
        var width = this.body.width();
        that.cwidth = parseInt((width-width0) / (this.body.find('table:first th').length-1));
        if(that.cwidth < width1) that.cwidth = width1;
        this.body.find('table:first th').each(function(i){
            if(i>0)
                $(this).css("width", that.cwidth-38);
            else
                $(this).css("width", width0-38 +that.maxLevel*12);
        });
        if(this.cchange) {this.ths = this.body.find('table:first th').map(function(){return $(this).outerWidth();}).get();this.change=false;}
        if(table != null){
            var level = that.levels[table.attr('table-id')];
            $(table).children('tbody').children('tr').each(function(i){
                //if($(this).find('td:first').hasClass('detail-control') && !that.horizontal) return;
                $(this).find('td').each(function(i){
                    if (i > 0) {
                        $(this).css("width", that.ths[i]);
                    }else{
                        $(this).css("width", that.ths[i] - ((level) * padding));
                    }
                });
            });
        }else{
            for(var i in this.tables){
                var table = that.tables[i].tables().nodes().toJQuery();
                var level = that.levels[table.attr('table-id')];
                $(table).children('tbody').children('tr').each(function(){
                    //if($(this).find('td:first').hasClass('detail-control') && !that.horizontal) return;
                    $(this).find('td').each(function(i){
                        if (i > 0) {
                            $(this).css("width", that.ths[i]);
                        }else{
                            $(this).css("width", that.ths[i] - ((level) * padding));
                        }
                    });
                });
            }
        }
    }
}